datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String? // 이름
  nickName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String? // 프로필
  phone         String?
  job           String?

  role         String?  // 그룹 내 역할
  authority     Int? // 그룹 설정 권한
  
  accounts      Account[]
  sessions      Session[]

  groupId String? // 소속 그룹 ID
  group   Group?  @relation(fields: [groupId], references: [id]) // 소속 그룹 데이터

  managementGroups  Group[]       @relation(name: "GroupManager") // 관리중인 그룹 데이터
  //steppayUserId Int
  //hasedPassword String?
  //credit Int?
  participationTask Task_Worker[] // 참여 작업 리스트

  createdAt     DateTime         @default(now())
  updatedAt     DateTime?         @updatedAt
  ProjectThread Project_Thread[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Group {
  id   String @id @default(cuid())
  name String

  //planId        Int // 사용중 플랜 정보
  //billingData   Int // 결제정보 (더미)
  //billing_start DateTime? // 결제 시작일

  managerId       String? // 이 그룹 전담PM의 ID
  supplierGroupId String? // 이 그룹을 담당하는 공급그룹ID(전담PM이 속한 그룹ID)

  members        User[] // 이 그룹에 속한 멤버 리스트
  projects       Project[] // 이 그룹이 보유한 프로젝트 리스트
  demandGroups   Group[]                @relation(name: "Supply") // 이 그룹의 수요 그룹 리스트
  //managementData Group_ManagementData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  manager User?  @relation(name: "GroupManager", fields: [managerId], references: [id]) // 이 그룹의 전담PM 데이터
  group   Group? @relation(name: "Supply", fields: [supplierGroupId], references: [id]) // 이 그룹에게 공급 받는 그룹 데이터
}

model Project {
  id     String @id @default(cuid())
  name   String // 프로젝트명
  status Int // 진행 상태

  difficulty Int // 난이도
  groupId    String // 이 프로젝트를 소유한 그룹ID

  tasks   Task[] // 이 프로젝트에 포함된 태스크 리스트
  threads Project_Thread[] // 이 프로젝트의 스레드 리스트

  request_startDate DateTime // 요청자가 제안한 시작일
  request_endDate   DateTime // 요청자가 제안한 종료일
  startDate         DateTime? // PM이 시작을 실시한 일자
  endDate           DateTime? //PM이 종료 처리한 일자

  group     Group    @relation(fields: [groupId], references: [id]) // 이 프로젝트를 소유한 그룹 데이터
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String        @id @default(cuid())
  name        String // 작업명
  status      Int // 작업 진행 상태
  isMilestone Boolean // 마일스톤 여부
  projectId   String // 이 태스크를 소유한 프로젝트 ID
  workerList  Task_Worker[] // 이 프로젝트에 참가하는 작업자 정보

  request_startDate DateTime // PM이 계획한 작업시작일
  request_endDate   DateTime // PM이 계획한 작업종료일
  startDate         DateTime?
  endDate           DateTime?

  project Project @relation(fields: [projectId], references: [id])
}

model Task_Worker {
  taskId    String // 작업 ID
  userId    String // 참가 작업자 ID
  inputRate Int // 배당된 투입률
  worker    User   @relation(fields: [userId], references: [id])
  task      Task   @relation(fields: [taskId], references: [id])

  @@id([userId, taskId])
}

model Task_Report {
  id               Int      @id @default(autoincrement())
  taskId           String
  userId           String
  plannedInputRate Int
  todayInputRate   Int
  message          String
  createdAt        DateTime
}

model Project_Thread {
  id        Int     @default(autoincrement())
  projectId String // 이 스레드가 달린 프로젝트 ID
  authorId  String // 스레드 메시지의 작성자 ID
  type      Int // 이 스레드의 타입
  body      Json // 본문, 더미로 일단 JSON
  project   Project @relation(fields: [projectId], references: [id])
  author    User    @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) // 작성일시

  @@id([id, projectId])
}
