generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  //nickName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  job           String?
  role          String?
  //authority     Int?
  groupId       String?
  group         Group?    @relation(fields: [groupId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  accounts         Account[]
  sessions         Session[]
  managementGroups Group[]          @relation("GroupManager")
  owningGroup      Group?           @relation("GroupOwner")
  ProjectThread    Project_Thread[]
  tasks            Task_Worker[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Group {
  id             String   @id @default(cuid())
  name           String
  ceo            String?
  email          String?
  phone          String?
  address        String?
  businessNumber String?
  ownerId        String   @unique
  owner          User     @relation("GroupOwner", fields: [ownerId], references: [id])
  managerId      String?
  manager        User?    @relation("GroupManager", fields: [managerId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  supplyGroupId  String?
  supplyGroup    Group?   @relation("SupplyGroup", fields: [supplyGroupId], references: [id])

  demandGroups Group[]   @relation("SupplyGroup")
  projects     Project[]
  members      User[]
}

model Project {
  id                String    @id @default(cuid())
  name              String
  message           String?
  status            Int?
  difficulty        Int?
  groupId           String
  request_startDate DateTime?
  request_endDate   DateTime?
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  group             Group     @relation(fields: [groupId], references: [id])

  threads Project_Thread[]
  tasks   Task[]
}

model Task {
  id          String    @id @default(cuid())
  name        String
  status      Int?
  isMilestone Boolean?
  projectId   String
  startDate   DateTime?
  endDate     DateTime?
  project     Project   @relation(fields: [projectId], references: [id])

  workers Task_Worker[]
}

model Task_Worker {
  taskId    String
  userId    String
  inputRate Int
  startDate DateTime?
  endDate   DateTime?
  task      Task      @relation(fields: [taskId], references: [id])
  worker    User      @relation(fields: [userId], references: [id])

  @@id([userId, taskId])
}

model Task_Report {
  id               Int      @id @default(autoincrement())
  taskId           String
  userId           String
  plannedInputRate Int
  todayInputRate   Int
  message          String
  createdAt        DateTime
}

model Project_Thread {
  id        Int      @default(autoincrement())
  projectId String
  authorId  String
  type      Int
  body      Json
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@id([id, projectId])
}
